import type { FractureRuleType } from "../../types/css-rules";

// prettier-ignore
export const cursor: Array<FractureRuleType> = [
	{ selector: 'no-events', property: 'pointer-events', value: 'none;' , hasHover: true },
  { selector: 'cursor-alias', property: 'cursor', value: 'alias' , hasHover: true },
  { selector: 'cursor-all-scroll', property: 'cursor', value: 'all-scroll' , hasHover: true },
  { selector: 'cursor-auto', property: 'cursor', value: 'auto' , hasHover: true },
  { selector: 'cursor-cell', property: 'cursor', value: 'cell' , hasHover: true },
  { selector: 'cursor-context-menu', property: 'cursor', value: 'context-menu', hasHover: true },
  { selector: 'cursor-col-resize', property: 'cursor', value: 'col-resize', hasHover: true },
  { selector: 'cursor-copy', property: 'cursor', value: 'copy' , hasHover: true },
  { selector: 'cursor-crosshair', property: 'cursor', value: 'crosshair' , hasHover: true },
  { selector: 'cursor-default', property: 'cursor', value: 'default' , hasHover: true },
  { selector: 'cursor-e-resize', property: 'cursor', value: 'e-resize', hasHover: true },
  { selector: 'cursor-ew-resize', property: 'cursor', value: 'ew-resize', hasHover: true },
  { selector: 'cursor-grab', property: 'cursor', value: 'grab' , hasHover: true },
  { selector: 'cursor-grabbing', property: 'cursor', value: 'grabbing' , hasHover: true },
  { selector: 'cursor-help', property: 'cursor', value: 'help' , hasHover: true },
  { selector: 'cursor-move', property: 'cursor', value: 'move' , hasHover: true },
  { selector: 'cursor-n-resize', property: 'cursor', value: 'n-resize', hasHover: true },
  { selector: 'cursor-ne-resize', property: 'cursor', value: 'ne-resize', hasHover: true },
  { selector: 'cursor-nesw-resize', property: 'cursor', value: 'nesw-resize', hasHover: true },
  { selector: 'cursor-ns-resize', property: 'cursor', value: 'ns-resize', hasHover: true },
  { selector: 'cursor-nw-resize', property: 'cursor', value: 'nw-resize', hasHover: true },
  { selector: 'cursor-nwse-resize', property: 'cursor', value: 'nwse-resize', hasHover: true },
  { selector: 'cursor-no-drop', property: 'cursor', value: 'no-drop', hasHover: true },
  { selector: 'cursor-none', property: 'cursor', value: 'none' , hasHover: true },
  { selector: 'cursor-not-allowed', property: 'cursor', value: 'not-allowed', hasHover: true },
  { selector: 'cursor-pointer', property: 'cursor', value: 'pointer' , hasHover: true },
  { selector: 'cursor-progress', property: 'cursor', value: 'progress' , hasHover: true },
  { selector: 'cursor-row-resize', property: 'cursor', value: 'row-resize', hasHover: true },
  { selector: 'cursor-s-resize', property: 'cursor', value: 's-resize', hasHover: true },
  { selector: 'cursor-se-resize', property: 'cursor', value: 'se-resize', hasHover: true },
  { selector: 'cursor-sw-resize', property: 'cursor', value: 'sw-resize', hasHover: true },
  { selector: 'cursor-text', property: 'cursor', value: 'text' , hasHover: true },
  { selector: 'cursor-w-resize', property: 'cursor', value: 'w-resize', hasHover: true },
  { selector: 'cursor-wait', property: 'cursor', value: 'wait' , hasHover: true },
  { selector: 'cursor-zoom-in', property: 'cursor', value: 'zoom-in', hasHover: true },
  { selector: 'cursor-zoom-out', property: 'cursor', value: 'zoom-out', hasHover: true },
];
